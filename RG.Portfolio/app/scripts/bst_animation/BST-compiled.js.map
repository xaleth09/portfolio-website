{"version":3,"sources":["BST.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;AAiBA,IAAM,aAAa,CAAnB;;IACM,G;AAEF,iBAAY,MAAZ,EAAmB;AAAA;;AACf,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,QAAL,GAAgB,EAAhB;AACA,aAAK,MAAL,GAAc,CAAd;AACA,eAAO,MAAP,CAAc,IAAd,EAAmB,MAAnB;AACH;;AAEH;;;;;4CACwC;AAAA,gBAApB,OAAoB,yDAAV,KAAK,IAAK;;AAClC,oBAAQ,GAAR,CAAY,EAAZ;AACA,iBAAK,oBAAL,CAA0B,OAA1B,EAAkC,EAAlC;AACA,oBAAQ,GAAR,CAAY,EAAZ;AACH;;;6CAEoB,O,EAAS,G,EAAI;AAC9B,gBAAG,WAAW,IAAd,EAAmB;AACf,qBAAK,oBAAL,CAA0B,QAAQ,KAAlC,EAAyC,MAAM,KAA/C;AACA,wBAAQ,GAAR,CAAY,MAAK,EAAL,GAAQ,QAAQ,GAA5B;AACA,qBAAK,oBAAL,CAA0B,QAAQ,IAAlC,EAAwC,MAAM,KAA9C;AACH;AACJ;;;uCAEgC;AAAA,gBAApB,OAAoB,yDAAV,KAAK,IAAK;;AAC7B,gBAAG,WAAW,IAAd,EAAmB;AACf,qBAAK,YAAL,CAAkB,QAAQ,IAA1B;AACA,wBAAQ,GAAR,CAAY,QAAQ,GAApB;AACA,qBAAK,YAAL,CAAkB,QAAQ,KAA1B;AACH;AACJ;;;wCAEiC;AAAA,gBAApB,OAAoB,yDAAV,KAAK,IAAK;;AAC9B,gBAAG,WAAW,IAAd,EAAmB;AACf,wBAAQ,GAAR,CAAY,QAAQ,GAApB;AACA,qBAAK,aAAL,CAAmB,QAAQ,IAA3B;AACA,qBAAK,aAAL,CAAmB,QAAQ,KAA3B;AACH;AACJ;;;yCAEkC;AAAA,gBAApB,OAAoB,yDAAV,KAAK,IAAK;;AAC/B,gBAAG,WAAW,IAAd,EAAmB;AACf,qBAAK,cAAL,CAAoB,QAAQ,IAA5B;AACA,qBAAK,cAAL,CAAoB,QAAQ,KAA5B;AACA,wBAAQ,GAAR,CAAY,QAAQ,GAApB;AACH;AACJ;;AAEH;;;;;gBACc,C,yDAAI,KAAK,I;;;;;iCACd,EAAE,I;;;;;0DACM,KAAK,UAAL,CAAgB,EAAE,IAAlB,C;;;;mCAGL,C;;;iCAEH,EAAE,K;;;;;0DACM,KAAK,UAAL,CAAgB,EAAE,KAAlB,C;;;;;;;;;;;;gBAIF,C,yDAAI,KAAK,I;;;;;;mCACZ,C;;;iCAEH,EAAE,I;;;;;2DACM,KAAK,WAAL,CAAiB,EAAE,IAAnB,C;;;iCAGR,EAAE,K;;;;;2DACM,KAAK,WAAL,CAAiB,EAAE,KAAnB,C;;;;;;;;;;;;gBAID,C,yDAAI,KAAK,I;;;;;iCAChB,EAAE,I;;;;;2DACM,KAAK,YAAL,CAAkB,EAAE,IAApB,C;;;iCAGR,EAAE,K;;;;;2DACM,KAAK,YAAL,CAAkB,EAAE,KAApB,C;;;;mCAGL,C;;;;;;;;;;AAIZ;;;;;;;+BAKS,M,EAAyB;AAAA,gBAAjB,IAAiB,yDAAV,KAAK,IAAK;;AAC5B,gBAAG,KAAK,MAAL,GAAc,UAAjB,EAA4B;AACxB,qBAAK,IAAL,GAAY,KAAK,SAAL,CAAe,MAAf,EAAuB,IAAvB,CAAZ;AACA,qBAAK,kBAAL;AACH;AACJ;;;kCAES,M,EAAyB;AAAA,gBAAjB,IAAiB,yDAAV,KAAK,IAAK;;AAC/B,gBAAG,SAAS,IAAZ,EAAiB;AACb,uBAAO,IAAI,IAAJ,CAAS,EAAC,KAAK,OAAO,KAAP,CAAN,EAAqB,OAAO,OAAO,OAAP,IAAkB,CAA9C,EAAT,CAAP;AACH,aAFD,MAEM,IAAG,OAAO,KAAP,IAAgB,KAAK,GAAxB,EAA4B;AAC9B,qBAAK,IAAL,GAAY,KAAK,SAAL,CAAe,MAAf,EAAuB,KAAK,IAA5B,CAAZ;AACA,uBAAO,IAAP;AACH,aAHK,MAGA,IAAG,OAAO,KAAP,IAAgB,KAAK,GAAxB,EAA4B;AAC9B,qBAAK,KAAL,GAAa,KAAK,SAAL,CAAe,MAAf,EAAuB,KAAK,KAA5B,CAAb;AACA,uBAAO,IAAP;AACH,aAHK,MAGD;AACD,uBAAO,IAAP;AACH;AACJ;;;+BAGM,G,EAAI;AACP,iBAAK,IAAL,GAAY,KAAK,SAAL,CAAe,GAAf,EAAoB,KAAK,IAAzB,CAAZ;AACA,iBAAK,kBAAL;AACA,gBAAG,KAAK,IAAL,IAAa,IAAhB,EAAqB;AACjB,uBAAO,IAAI,YAAJ,EAAP;AACH;AACJ;;;kCAES,G,EAAK,I,EAAK;AAChB,gBAAG,QAAQ,IAAX,EAAgB;AACZ,uBAAO,IAAP;AACH;;AAED,gBAAG,MAAM,KAAK,GAAd,EAAkB;AAAE;AAChB,qBAAK,IAAL,GAAY,KAAK,SAAL,CAAe,GAAf,EAAoB,KAAK,IAAzB,CAAZ;AACA,uBAAO,IAAP;AACH,aAHD,MAGM,IAAG,MAAM,KAAK,GAAd,EAAkB;AAAE;AACtB,qBAAK,KAAL,GAAa,KAAK,SAAL,CAAe,GAAf,EAAoB,KAAK,KAAzB,CAAb;AACA,uBAAO,IAAP;AACH,aAHK,MAGD;AAAE;AACH,oBAAG,KAAK,IAAL,IAAa,IAAb,IAAqB,KAAK,KAAL,IAAc,IAAtC,EAA2C;AAAE;AACzC,2BAAO,IAAP;AACH,iBAFD,MAEM,IAAG,KAAK,IAAL,IAAa,IAAb,IAAqB,KAAK,KAAL,IAAc,IAAtC,EAA2C;AAAE;AAC/C,wBAAG,QAAQ,KAAK,IAAhB,EAAqB;AACjB,6BAAK,IAAL,CAAU,QAAV,GAAqB,CAArB;AACA,6BAAK,IAAL,CAAU,KAAV,GAAkB,CAAlB;AACH;AACD,2BAAO,KAAK,IAAZ;AACH,iBANK,MAMA,IAAG,KAAK,IAAL,IAAa,IAAb,IAAqB,KAAK,KAAL,IAAc,IAAtC,EAA2C;AAAE;AAC/C,wBAAG,QAAQ,KAAK,IAAhB,EAAqB;AACjB,6BAAK,KAAL,CAAW,QAAX,GAAsB,CAAtB;AACA,6BAAK,KAAL,CAAW,KAAX,GAAmB,CAAnB;AACH;AACD,2BAAO,KAAK,KAAZ;AACH,iBANK,MAMD;AAAE;AACH,wBAAI,MAAM,KAAK,OAAL,CAAa,KAAK,KAAlB,CAAV;AACA,yBAAK,GAAL,GAAW,IAAI,GAAf;AACA,yBAAK,KAAL,GAAa,IAAI,KAAjB;AACA,yBAAK,KAAL,GAAa,KAAK,SAAL,CAAe,IAAI,GAAnB,EAAwB,KAAK,KAA7B,CAAb;AACA,2BAAO,IAAP;AACH;AACJ;AACJ;;;kCAEwB;AAAA,gBAAjB,IAAiB,yDAAV,KAAK,IAAK;;AACrB,gBAAG,KAAK,IAAL,IAAa,IAAhB,EAAqB;AACjB,uBAAO,IAAP;AACH;;AAED,mBAAO,KAAK,OAAL,CAAa,KAAK,IAAlB,CAAP;AACH;;;+BAGM,G,EAAsB;AAAA,gBAAjB,IAAiB,yDAAV,KAAK,IAAK;;AACzB,gBAAG,QAAQ,IAAX,EAAgB;AACZ,uBAAO,IAAP;AACH;;AAED,gBAAG,OAAO,KAAK,GAAf,EAAmB;AACf,uBAAO,IAAP;AACH,aAFD,MAEM,IAAG,MAAM,KAAK,GAAd,EAAmB;AACrB,uBAAO,KAAK,MAAL,CAAY,GAAZ,EAAiB,KAAK,IAAtB,CAAP;AACH,aAFK,MAEA,IAAG,MAAM,KAAK,GAAd,EAAkB;AACpB,uBAAO,KAAK,MAAL,CAAY,GAAZ,EAAiB,KAAK,KAAtB,CAAP;AACH;AAEJ;;AAGD;;;;;;AAiBD;;;;AAIC;AACA;AACA;AACA;oCACW;AACP,gBAAI,IAAI,EAAR;AACA,iBAAK,QAAL,GAAgB,EAAhB;;AAEA,gBAAG,KAAK,IAAL,IAAa,IAAhB,EAAqB;AACjB;AACH;;AAED,cAAE,IAAF,CAAO,KAAK,IAAZ;;AAEA,mBAAM,EAAE,MAAF,IAAY,CAAlB,EAAoB;AAChB,oBAAI,OAAO,EAAE,KAAF,EAAX;;AAEA,qBAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB;;AAEA,oBAAG,KAAK,IAAL,IAAa,IAAhB,EAAqB;AACjB,yBAAK,IAAL,CAAU,KAAV,GAAkB,KAAK,KAAL,GAAW,CAA7B;AACA,yBAAK,IAAL,CAAU,QAAV,GAAqB,KAAK,QAAL,GAAc,CAAnC;AACA,sBAAE,IAAF,CAAO,KAAK,IAAZ;AACH;AACD,oBAAG,KAAK,KAAL,IAAc,IAAjB,EAAsB;AAClB,yBAAK,KAAL,CAAW,KAAX,GAAmB,KAAK,KAAL,GAAW,CAA9B;AACA,yBAAK,KAAL,CAAW,QAAX,GAAsB,KAAK,QAAL,GAAc,CAAd,GAAgB,CAAtC;AACA,sBAAE,IAAF,CAAO,KAAK,KAAZ;AACH;AACJ;;AAED,iBAAK,MAAL,GAAc,KAAK,QAAL,CAAc,KAAK,QAAL,CAAc,MAAd,GAAqB,CAAnC,EAAsC,KAApD;AACA,mBAAO,KAAK,QAAZ;AACH;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6CACoB;AAChB,gBAAI,SAAS,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,MAA3B,EAAmC,QAAnC,CAAb;AACA,iBAAK,SAAL;AACA,gBAAG,KAAK,QAAL,CAAc,MAAd,IAAwB,CAA3B,EAA6B;AACzB;AACH;;AALe;AAAA;AAAA;;AAAA;AAQhB,qCAAa,KAAK,QAAlB,8HAA2B;AAAA,wBAAnB,CAAmB;;AACvB,sBAAE,KAAF,CAAQ,MAAR,IAAkB,IAAlB;AACA,sBAAE,KAAF,CAAQ,OAAR,IAAmB,IAAnB;AACA,sBAAE,IAAF,GAAS,IAAT;;AAGA,wBAAI,MAAM,KAAK,GAAL,CAAS,CAAT,EAAW,EAAE,KAAF,GAAQ,CAAnB,CAAV;AACA,wBAAI,UAAU,KAAK,GAAL,CAAS,CAAT,EAAW,EAAE,KAAF,GAAQ,CAAnB,CAAd;;AAEA,wBAAI,KAAK,WAAW,MAAX,GAAkB,EAAlB,GAAyB,WAAW,MAAX,GAAkB,EAAnB,GAAwB,EAAE,KAA3D,CATuB,CAS6C;AACpE,wBAAI,KAAK,WAAW,MAAX,GAAkB,EAAlB,GAAyB,WAAW,MAAX,GAAkB,EAAnB,IAAwB,EAAE,KAAF,GAAQ,CAAhC,CAAjC;;AAEA,wBAAI,KAAK,WAAW,KAAX,GAAiB,GAAjB,GAAyB,WAAW,KAAX,GAAiB,GAAlB,GAAwB,EAAE,QAA1B,GAAoC,CAArE;;AAEA,wBAAG,EAAE,IAAF,IAAU,IAAb,EAAkB;AACd,4BAAI,SAAS,KAAK,WAAW,KAAX,GAAiB,OAAnC;AACA,0BAAE,KAAF,CAAQ,MAAR,IAAkB,IAAI,IAAJ,CAAS,EAAT,EAAa,EAAb,EAAiB,MAAjB,EAAyB,EAAzB,EAA6B,OAAO,EAAE,KAAT,CAA7B,CAAlB;AACH;;AAED,wBAAG,EAAE,KAAF,IAAW,IAAd,EAAmB;AACf,4BAAI,UAAU,KAAK,WAAW,KAAX,GAAiB,OAApC;AACA,0BAAE,KAAF,CAAQ,OAAR,IAAmB,IAAI,IAAJ,CAAS,EAAT,EAAa,EAAb,EAAiB,OAAjB,EAA0B,EAA1B,EAA8B,OAAO,EAAE,KAAT,CAA9B,CAAnB;AACH;;AAED,sBAAE,IAAF,GAAS,IAAI,IAAJ,CAAS,EAAT,EAAY,EAAZ,EAAe,EAAC,OAAO,EAAE,KAAV,EAAiB,MAAM,EAAE,GAAzB,EAAf,CAAT;AACH;AAjCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCnB;;;+BAGK;AAAA;AAAA;AAAA;;AAAA;AACF,sCAAa,KAAK,QAAlB,mIAA2B;AAAA,wBAAnB,CAAmB;;AACvB,wBAAG,EAAE,KAAF,CAAQ,MAAR,KAAmB,IAAtB,EAA2B;AACvB,0BAAE,KAAF,CAAQ,MAAR,EAAgB,IAAhB;AACH;AACD,wBAAG,EAAE,KAAF,CAAQ,OAAR,KAAoB,IAAvB,EAA4B;AACxB,0BAAE,KAAF,CAAQ,OAAR,EAAiB,IAAjB;AACH;;AAED,sBAAE,IAAF,CAAO,IAAP;AACH;AAVC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWL;;;uCAjHoB;AACrB,gBAAI,SAAS,IAAI,GAAJ,EAAb;;AAEA;AACA,gBAAI,WAAW,GAAf;AACA,iBAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,QAAnB,EAA6B,GAA7B,EAAkC;AAC9B,oBAAI,SAAS,KAAK,KAAL,CAAY,KAAK,MAAL,KAAgB,EAAjB,GAAuB,CAAlC,CAAb;AACA,oBAAI,SAAS,KAAK,KAAL,CAAY,KAAK,MAAL,KAAgB,EAAjB,GAAuB,CAAlC,CAAb;AACA,uBAAO,MAAP,CAAc,EAAC,KAAK,MAAN,EAAa,OAAO,MAApB,EAAd;AACH;;AAED,mBAAO,MAAP;AACH;;;;;;IAwGK,I;AACF,kBAAY,MAAZ,EAAmB;AAAA;;AACf,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,KAAL,GAAa,IAAb;AACA,aAAK,GAAL,GAAW,CAAX;AACA,aAAK,KAAL,GAAa,CAAb;;AAEA;AACA,aAAK,KAAL,GAAa,CAAb;AACA,aAAK,QAAL,GAAgB,CAAhB;;AAEA,aAAK,KAAL,GAAc,EAAC,MAAM,IAAP,EAAa,OAAO,IAApB,EAAd;;AAEA,aAAK,IAAL,GAAY,IAAI,IAAJ,EAAZ;;AAEA,eAAO,MAAP,CAAc,IAAd,EAAmB,MAAnB;AACH;;AAED;;;;;;;;;;;;;;;;AAiBA;;;;;;AAMA;;;;;2DACY,C;;;;;iCACL,EAAE,I;;;;;2DACM,KAAK,UAAL,CAAgB,EAAE,IAAlB,C;;;;mCAGL,EAAE,G;;;iCAEL,EAAE,K;;;;;2DACM,KAAK,UAAL,CAAgB,EAAE,KAAlB,C;;;;;;;;;;;4DAIF,C;;;;;;mCACH,EAAE,G;;;iCAEL,EAAE,I;;;;;2DACM,KAAK,WAAL,CAAiB,EAAE,IAAnB,C;;;iCAGR,EAAE,K;;;;;2DACM,KAAK,WAAL,CAAiB,EAAE,KAAnB,C;;;;;;;;;;;6DAID,C;;;;;iCACP,EAAE,I;;;;;2DACM,KAAK,YAAL,CAAkB,EAAE,IAApB,C;;;iCAGR,EAAE,K;;;;;2DACM,KAAK,YAAL,CAAkB,EAAE,KAApB,C;;;;mCAGL,EAAE,G","file":"BST-compiled.js","sourcesContent":["/**\n * Created by xaleth on 6/12/2016.\n * with help from http://www.2ality.com/2015/03/es6-generators.html\n * \"ES6 generators in Depth\" by Dr. Axel Rauschmayer\n *\n *  // Recursively traverse the tree, printing out the keys, one per line; by changing order\n //    of statements, can get all 6 traversals:\n //\n //    Preorder          V L R\n //    Inorder           L V R\n //    Postorder         L R V\n //    Reverse Preorder  V R L\n //    ReverseInorder    R V L\n //    ReversePostorder  R L V\n *\n */\n\nconst MAX_HEIGHT = 5;\nclass BST{\n\n    constructor(config){\n        this.root = null;\n        this.bfsArray = [];\n        this.height = 0;\n        Object.assign(this,config);\n    }\n\n  //Printing for Debugging Purposes\n    printIndentedTree(current = this.root){\n        console.log(\"\");\n        this.printIndentedTreeAux(current,\"\");\n        console.log(\"\");\n    }\n\n    printIndentedTreeAux(current, str){\n        if(current != null){\n            this.printIndentedTreeAux(current.right, str + \"   \");\n            console.log(str +\"\"+current.key);\n            this.printIndentedTreeAux(current.left, str + \"   \");\n        }\n    }\n\n    printInOrder(current = this.root){\n        if(current != null){\n            this.printInOrder(current.left);\n            console.log(current.key);\n            this.printInOrder(current.right);\n        }\n    }\n\n    printPreOrder(current = this.root){\n        if(current != null){\n            console.log(current.key);\n            this.printPreOrder(current.left);\n            this.printPreOrder(current.right);\n        }\n    }\n\n    printPostOrder(current = this.root){\n        if(current != null){\n            this.printPostOrder(current.left);\n            this.printPostOrder(current.right);\n            console.log(current.key)\n        }\n    }\n\n  //Iterator-Generators\n    *inOrderGen(n = this.root){\n        if(n.left){\n            yield* this.inOrderGen(n.left);\n        }\n\n        yield n;\n\n        if(n.right){\n            yield* this.inOrderGen(n.right);\n        }\n    }\n\n    *preOrderGen(n = this.root){\n        yield n;\n\n        if(n.left){\n            yield* this.preOrderGen(n.left);\n        }\n\n        if(n.right){\n            yield* this.preOrderGen(n.right);\n        }\n    }\n\n    *postOrderGen(n = this.root){\n        if(n.left){\n            yield* this.postOrderGen(n.left);\n        }\n\n        if(n.right){\n            yield* this.postOrderGen(n.right);\n        }\n\n        yield n;\n    }\n\n\n  /*\n    Utility Functions to update this BST:\n    insert(), remove() + removeAux(), search(), findMin(), randomBSTgen()\n  */\n\n    insert(keyVal, node = this.root){\n        if(this.height < MAX_HEIGHT){\n            this.root = this.insertAux(keyVal, node);\n            this.updateBSTAnimation();\n        }\n    }\n\n    insertAux(keyVal, node = this.root){\n        if(node === null){\n            return new Node({key: keyVal['key'], value: keyVal['value'] | 0});\n        }else if(keyVal['key'] < node.key){\n            node.left = this.insertAux(keyVal, node.left);\n            return node;\n        }else if(keyVal['key'] > node.key){\n            node.right = this.insertAux(keyVal, node.right);\n            return node;\n        }else{\n            return node;\n        }\n    }\n\n\n    remove(key){\n        this.root = this.removeAux(key, this.root);\n        this.updateBSTAnimation();\n        if(this.root == null){\n            tree = BST.randomBSTgen();\n        }\n    }\n\n    removeAux(key, node){\n        if(node == null){\n            return null;\n        }\n\n        if(key < node.key){ //go left\n            node.left = this.removeAux(key, node.left)\n            return node;\n        }else if(key > node.key){ //go right\n            node.right = this.removeAux(key, node.right);\n            return node;\n        }else{ //key == node.key\n            if(node.left == null && node.right == null){ //no children\n                return null;\n            }else if(node.left != null && node.right == null){ //only left child\n                if(node == this.root){\n                    node.left.numInRow = 0;\n                    node.left.depth = 0;\n                }\n                return node.left;\n            }else if(node.left == null && node.right != null){ //only right child\n                if(node == this.root){\n                    node.right.numInRow = 0;\n                    node.right.depth = 0;\n                }\n                return node.right;\n            }else{ //two children\n                let tmp = this.findMin(node.right);\n                node.key = tmp.key;\n                node.value = tmp.value;\n                node.right = this.removeAux(tmp.key, node.right);\n                return node;\n            }\n        }\n    }\n\n    findMin(node = this.root){\n        if(node.left == null){\n            return node;\n        }\n\n        return this.findMin(node.left);\n    }\n\n\n    search(key, curN = this.root){\n        if(curN == null){\n            return null;\n        }\n\n        if(key == curN.key){\n            return curN;\n        }else if(key < curN.key ){\n            return this.search(key, curN.left);\n        }else if(key > curN.key){\n            return this.search(key, curN.right);\n        }\n\n    }\n\n\n    //Generates and returns a random BST tree\n    static randomBSTgen(){\n    var retBST = new BST();\n\n    //let numNodes = Math.floor((Math.random() * MAX_NODES) + 3);\n    let numNodes = 500;\n    for(let i = 0; i < numNodes; i++ ){\n        let rndKey = Math.floor((Math.random() * 40) + 1);\n        let rndVal = Math.floor((Math.random() * 40) + 1);\n        retBST.insert({key: rndKey,value: rndVal});\n    }\n\n    return retBST;\n}\n\n\n\n   /*\n    Utility Functions for Drawing the BST\n   */\n\n    //Does a BFS of the BST to update the Depth, and rowPosition values of each node,\n    //updates the BST property bfsArray[] which is an array of nodes\n    //in depth order and returns it\n    //The depth update and the returned array are use in updateBSTAnimation\n    BFSUpdate(){\n        let q = [];\n        this.bfsArray = [];\n\n        if(this.root == null){\n            return;\n        }\n\n        q.push(this.root);\n\n        while(q.length != 0){\n            let node = q.shift();\n\n            this.bfsArray.push(node);\n\n            if(node.left != null){\n                node.left.depth = node.depth+1;\n                node.left.numInRow = node.numInRow*2;\n                q.push(node.left);\n            }\n            if(node.right != null){\n                node.right.depth = node.depth+1;\n                node.right.numInRow = node.numInRow*2+1;\n                q.push(node.right);\n            }\n        }\n\n        this.height = this.bfsArray[this.bfsArray.length-1].depth;\n        return this.bfsArray;\n    }\n\n\n    //Func. that adds leaves and connecting edges (lines), that can be drawn\n    //to the BST_canvas, to each node within the BST.\n    //This does this by using this.bfsArray[] (an array of bst nodes in depth order)\n    //and the nodes position in its corresponding row (node.numInRow),\n    //              ex.  0\n    //                 0    1\n    //                0 1  2 3,\n    //\n    //to place each leaf and line proportionally throughout the BST_canvas\n    updateBSTAnimation(){\n        let colors = [\"black\", \"cyan\", \"green\", \"blue\", \"purple\"];\n        this.BFSUpdate();\n        if(this.bfsArray.length == 0){\n            return;\n        }\n\n\n        for(let n of this.bfsArray){\n            n.lines[\"left\"] = null;\n            n.lines[\"right\"] = null;\n            n.leaf = null;\n\n\n            let pow = Math.pow(2,n.depth+1);\n            let powPlus = Math.pow(2,n.depth+2);\n\n            let fy = BST_canvas.height/10 + ((BST_canvas.height/10)*(n.depth)); //Y position of leaves at N depth\n            let ty = BST_canvas.height/10 + ((BST_canvas.height/10)*(n.depth+1));\n\n            let fx = BST_canvas.width/pow + ((BST_canvas.width/pow)*(n.numInRow)*2) ;\n\n            if(n.left != null){\n                let txLeft = fx - BST_canvas.width/powPlus;\n                n.lines[\"left\"] = new Line(fx, fy, txLeft, ty, colors[n.depth]);\n            }\n\n            if(n.right != null){\n                let txRight = fx + BST_canvas.width/powPlus;\n                n.lines[\"right\"] = new Line(fx, fy, txRight, ty, colors[n.depth]);\n            }\n\n            n.leaf = new Leaf(fx,fy,{depth: n.depth, text: n.key})\n        }\n    }\n\n\n    draw(){\n        for(let n of this.bfsArray){\n            if(n.lines[\"left\"] != null){\n                n.lines[\"left\"].draw();\n            }\n            if(n.lines[\"right\"] != null){\n                n.lines[\"right\"].draw();\n            }\n\n            n.leaf.draw();\n        }\n    }\n}\n\nclass Node{\n    constructor(config){\n        this.left = null;\n        this.right = null;\n        this.key = 0;\n        this.value = 0;\n\n        //used for drawing in updateBSTAnimation();\n        this.depth = 0;\n        this.numInRow = 0;\n\n        this.lines =  {left: null, right: null};\n\n        this.leaf = new Leaf();\n\n        Object.assign(this,config);\n    }\n\n    /*Generator-Iteration InOrder\n     for(let x of tree.root){\n     console.log(x)\n     }\n\n     //this makes the object itself iterable\n     //in this case an In-Order Traversal\n     *[Symbol.iterator](){\n     if(this.left){\n     yield* this.left;\n     }\n     yield this.key;\n     if(this.right){\n     yield* this.right;\n     }\n     }\n     */\n    /*\n     Iterating through a Generator InOrder\n     for(let x of Node.prototype.inOrderGen(tree.root)){\n     console.log(x);\n     }\n     */\n    //this retuns an iterator\n    *inOrderGen(n){\n        if(n.left){\n            yield* this.inOrderGen(n.left);\n        }\n\n        yield n.key;\n\n        if(n.right){\n            yield* this.inOrderGen(n.right);\n        }\n    }\n\n    *preOrderGen(n){\n        yield n.key;\n\n        if(n.left){\n            yield* this.preOrderGen(n.left);\n        }\n\n        if(n.right){\n            yield* this.preOrderGen(n.right);\n        }\n    }\n\n    *postOrderGen(n){\n        if(n.left){\n            yield* this.postOrderGen(n.left);\n        }\n\n        if(n.right){\n            yield* this.postOrderGen(n.right);\n        }\n\n        yield n.key;\n    }\n\n}\n\n\n\n\n\n"]}