{"version":3,"sources":["binaryTree.js"],"names":[],"mappings":";;;;;;AAAA;;;AAGA;;;;;;;;;;;;;;;IAcM,I;AACF,kBAAY,MAAZ,EAAmB;AAAA;;AACf,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,KAAL,GAAa,IAAb;AACA,aAAK,GAAL,GAAW,CAAX;AACA,aAAK,KAAL;;AAEA,eAAO,MAAP,CAAc,IAAd,EAAmB,MAAnB;AACH;;AAED;AACA;;;;;;;;aAKE,OAAO,Q;;;;;;iCACF,KAAK,I;;;;;0DACG,KAAK,I;;;;mCAEV,KAAK,G;;;iCACR,KAAK,K;;;;;0DACG,KAAK,K;;;;;;;;;;;;;;IAMlB,I;AACF,kBAAY,MAAZ,EAAmB;AAAA;;AACf,aAAK,IAAL,GAAY,IAAZ;;AAEA,eAAO,MAAP,CAAc,IAAd,EAAmB,MAAnB;AACH;;;;+BAEM,C,EAAiB;AAAA,gBAAd,CAAc,yDAAV,KAAK,IAAK;;AACpB,gBAAG,MAAM,IAAT,EAAc;AACV,uBAAO,IAAI,IAAJ,CAAS,EAAC,KAAK,CAAN,EAAT,CAAP;AACH,aAFD,MAEM,IAAG,IAAI,EAAE,GAAT,EAAa;AACf,kBAAE,IAAF,GAAS,KAAK,MAAL,CAAY,CAAZ,EAAe,EAAE,IAAjB,CAAT;AACA,uBAAO,CAAP;AACH,aAHK,MAGA,IAAG,IAAI,EAAE,GAAT,EAAa;AACf,kBAAE,KAAF,GAAU,KAAK,MAAL,CAAY,CAAZ,EAAe,EAAE,KAAjB,CAAV;AACA,uBAAO,CAAP;AACH,aAHK,MAGD;AACD,uBAAO,CAAP;AACH;AACJ;;;iCAEO,CAEP;;;4CAE+B;AAAA,gBAAd,CAAc,yDAAV,KAAK,IAAK;;AAC5B,oBAAQ,GAAR,CAAY,EAAZ;AACA,iBAAK,oBAAL,CAA0B,CAA1B,EAA4B,EAA5B;AACA,oBAAQ,GAAR,CAAY,EAAZ;AACH;;;6CAEoB,C,EAAG,G,EAAI;AACxB,gBAAG,KAAK,IAAR,EAAa;AACT,qBAAK,oBAAL,CAA0B,EAAE,KAA5B,EAAmC,MAAM,KAAzC;AACA,wBAAQ,GAAR,CAAY,MAAK,EAAL,GAAQ,EAAE,GAAtB;AACA,qBAAK,oBAAL,CAA0B,EAAE,IAA5B,EAAkC,MAAM,KAAxC;AACH;AACJ;;;kCAE2B;AAAA,gBAApB,OAAoB,yDAAV,KAAK,IAAK;;AACxB,gBAAG,WAAW,IAAd,EAAmB;AACf,qBAAK,OAAL,CAAa,QAAQ,IAArB;AACA,wBAAQ,GAAR,CAAY,QAAQ,GAAR,GAAY,IAAZ,GAAiB,QAAQ,KAArC;AACA,qBAAK,OAAL,CAAa,QAAQ,KAArB;AACH;AACJ;;;;;;AAIL","file":"binaryTree-compiled.js","sourcesContent":["/**\n * Created by xaleth on 6/13/2016.\n */\n/**\n * Created by xaleth on 6/12/2016.\n *\n *  // Recursively traverse the tree, printing out the keys, one per line; by changing order\n //    of statements, can get all 6 traversals:\n //\n //    Preorder          V L R\n //    Inorder           L V R\n //    Postorder         L R V\n //    Reverse Preorder  V R L\n //    ReverseInorder    R V L\n //    ReversePostorder  R L V\n *\n */\nclass Node{\n    constructor(config){\n        this.left = null;\n        this.right = null;\n        this.key = 0;\n        this.value;\n\n        Object.assign(this,config);\n    }\n\n    //Generator-Iteration InOrder\n    /*\n     for(let x of tree){\n     console.log(x)\n     }\n     */\n    *[Symbol.iterator](){\n        if(this.left){\n            yield* this.left;\n        }\n        yield this.key;\n        if(this.right){\n            yield* this.right;\n        }\n    }\n\n}\n\nclass Tree{\n    constructor(config){\n        this.root = null;\n\n        Object.assign(this,config);\n    }\n\n    insert(k, t = this.root){\n        if(t === null){\n            return new Node({key: k});\n        }else if(k < t.key){\n            t.left = this.insert(k, t.left);\n            return t;\n        }else if(k > t.key){\n            t.right = this.insert(k, t.right);\n            return t;\n        }else{\n            return t;\n        }\n    }\n\n    remove(){\n\n    }\n\n    printIndentedTree(t = this.root){\n        console.log(\"\");\n        this.printIndentedTreeAux(t,\"\");\n        console.log(\"\");\n    }\n\n    printIndentedTreeAux(t, str){\n        if(t != null){\n            this.printIndentedTreeAux(t.right, str + \"   \");\n            console.log(str +\"\"+t.key);\n            this.printIndentedTreeAux(t.left, str + \"   \");\n        }\n    }\n\n    inOrder(current = this.root){\n        if(current != null){\n            this.inOrder(current.left);\n            console.log(current.key+\": \"+current.value);\n            this.inOrder(current.right);\n        }\n    }\n\n}\n\n/*\n/    myTree = new Tree();\n/\n/    myTree.root = myTree.insert(14, myTree.insert(20, myTree.insert(12, myTree.insert(2, myTree.insert(5, myTree.insert(3, myTree.insert(8,null)))))));\n/\n/    myTree.printIndentedTree();\n/\n/    for(let x of myTree.root){\n/        console.log(x);\n/    }\n/\n/    console.log(\"\");\n/    myTree.inOrder();\n*/\n"]}