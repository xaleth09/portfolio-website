{"version":3,"sources":["quadTree.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;AASA,IAAM,cAAc,CAApB;AACA,IAAM,aAAa,EAAnB;;IAEM,Q;AAEF,sBAAY,GAAZ,EAAiB,YAAjB,EAA8B;AAAA;;AAC1B,aAAK,KAAL,GAAa,GAAb,CAD0B,CACA;AAC1B,aAAK,OAAL,GAAe,EAAf,CAF0B,CAEA;AAC1B,aAAK,KAAL,GAAa,EAAb,CAH0B,CAGT;AACjB,aAAK,MAAL,GAAc,EAAY;AACtB,eAAQ,aAAa,CADX;AAEV,eAAQ,aAAa,CAFX;AAGV,mBAAQ,aAAa,KAHX;AAIV,oBAAQ,aAAa;AAJX,SAAd;AAMH;;;;gCAEM;AACH,gBAAI,WAAa,KAAK,MAAL,CAAY,KAAZ,GAAqB,CAAtB,GAA2B,CAA3C;AACA,gBAAI,YAAa,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAAtB,GAA2B,CAA3C;;AAEA,gBAAI,OAAO,KAAK,MAAL,CAAY,CAAvB;AACA,gBAAI,OAAO,KAAK,MAAL,CAAY,CAAvB;;AAEA,iBAAK,KAAL,CAAW,CAAX,IAAgB,IAAI,QAAJ,CAAa,KAAK,KAAL,GAAW,CAAxB,EAA2B,EAAC,GAAE,OAAK,QAAR,EAAkB,GAAE,IAApB,EAAoC,OAAM,QAA1C,EAAoD,QAAO,SAA3D,EAA3B,CAAhB;AACA,iBAAK,KAAL,CAAW,CAAX,IAAgB,IAAI,QAAJ,CAAa,KAAK,KAAL,GAAW,CAAxB,EAA2B,EAAC,GAAE,IAAH,EAAkB,GAAE,IAApB,EAAoC,OAAM,QAA1C,EAAoD,QAAO,SAA3D,EAA3B,CAAhB;AACA,iBAAK,KAAL,CAAW,CAAX,IAAgB,IAAI,QAAJ,CAAa,KAAK,KAAL,GAAW,CAAxB,EAA2B,EAAC,GAAE,IAAH,EAAkB,GAAE,OAAK,SAAzB,EAAoC,OAAM,QAA1C,EAAoD,QAAO,SAA3D,EAA3B,CAAhB;AACA,iBAAK,KAAL,CAAW,CAAX,IAAgB,IAAI,QAAJ,CAAa,KAAK,KAAL,GAAW,CAAxB,EAA2B,EAAC,GAAE,OAAK,QAAR,EAAkB,GAAE,OAAK,SAAzB,EAAoC,OAAM,QAA1C,EAAoD,QAAO,SAA3D,EAA3B,CAAhB;AACH;;AAGD;AACA;AACA;;;;+BACO,S,EAAU;AACb,gBAAG,KAAK,KAAL,CAAW,CAAX,KAAiB,IAApB,EAAyB;AACrB,oBAAI,QAAQ,KAAK,QAAL,CAAc,SAAd,CAAZ;;AAEA,oBAAG,SAAS,CAAC,CAAb,EAAe;AACX,yBAAK,KAAL,CAAW,KAAX,EAAkB,MAAlB,CAAyB,SAAzB;AACA;AACH;AACJ;;AAED,iBAAK,OAAL,CAAa,IAAb,CAAkB,SAAlB;;AAEA,gBAAI,KAAK,OAAL,CAAa,MAAb,GAAsB,WAAtB,IAAqC,KAAK,KAAL,GAAa,UAAtD,EAAkE;AAC9D,oBAAI,KAAK,KAAL,CAAW,CAAX,KAAiB,IAArB,EAA2B;AACvB,yBAAK,KAAL;AACH;;AAED,oBAAI,IAAI,CAAR;AACA,uBAAO,IAAI,KAAK,OAAL,CAAa,MAAxB,EAA+B;AAC3B,wBAAI,MAAM,KAAK,OAAL,CAAa,CAAb,CAAV;AACA,wBAAI,SAAQ,KAAK,QAAL,CAAc,GAAd,CAAZ;AACA,wBAAG,UAAS,CAAC,CAAb,EAAe;AACX,4BAAI,aAAa,KAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,OAAL,CAAa,OAAb,CAAqB,GAArB,CAApB,EAA8C,CAA9C,CAAjB;AACA,6BAAK,KAAL,CAAW,MAAX,EAAkB,MAAlB,CAAyB,WAAW,CAAX,CAAzB;AACH,qBAHD,MAGK;AACD;AACH;AACJ;AACJ;AACJ;;AAED;;;;iCACS,S,EAAU;AACf,gBAAI,QAAQ,KAAK,QAAL,CAAc,SAAd,CAAZ;AACA,gBAAI,aAAa,KAAK,OAAtB;;AAEA,gBAAG,KAAK,KAAL,CAAW,CAAX,KAAiB,IAApB,EAA0B;;AAEtB,oBAAI,SAAS,CAAC,CAAd,EAAiB;AACb,iCAAa,WAAW,MAAX,CAAkB,KAAK,KAAL,CAAW,KAAX,EAAkB,QAAlB,CAA2B,SAA3B,CAAlB,CAAb;AACH,iBAFD,MAEO;AAAA;AAAA;AAAA;;AAAA;AACH,6CAAiB,KAAK,KAAtB,8HAA6B;AAAA,gCAApB,IAAoB;;AACzB,yCAAa,WAAW,MAAX,CAAkB,KAAK,QAAL,CAAc,SAAd,CAAlB,CAAb;AACH;AAHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIN;AAEJ;;AAED,mBAAO,UAAP;AAEH;;;iCAEQ,S,EAAU;AACf,gBAAI,QAAQ,CAAC,CAAb;AACA,gBAAI,UAAU,KAAK,MAAL,CAAY,CAAZ,GAAiB,KAAK,MAAL,CAAY,KAAZ,GAAkB,CAAjD;AACA,gBAAI,UAAU,KAAK,MAAL,CAAY,CAAZ,GAAiB,KAAK,MAAL,CAAY,MAAZ,GAAmB,CAAlD;;AAEA;AACA,gBAAI,UAAW,UAAU,CAAV,GAAc,OAAd,IAAyB,UAAU,CAAV,GAAc,UAAU,MAAxB,GAAiC,OAAzE;AACA;AACA,gBAAI,UAAW,UAAU,CAAV,GAAc,OAA7B;;AAIA;AACA,gBAAI,UAAU,CAAV,GAAc,OAAd,IAAyB,UAAU,CAAV,GAAc,UAAU,KAAxB,GAAgC,OAA7D,EAAsE;AAClE,oBAAG,OAAH,EAAW;AACP,4BAAQ,CAAR;AACH,iBAFD,MAEM,IAAG,OAAH,EAAW;AACb,4BAAQ,CAAR;AACH;AACJ;AACD;AAPA,iBAQK,IAAI,UAAU,CAAV,GAAc,OAAlB,EAA2B;AAC5B,wBAAG,OAAH,EAAW;AACP,gCAAQ,CAAR;AACH,qBAFD,MAEM,IAAG,OAAH,EAAW;AACb,gCAAQ,CAAR;AACH;AACJ;AACD,mBAAO,KAAP;AACH;;;gCAEM;AACH,iBAAK,OAAL,GAAe,EAAf;AADG;AAAA;AAAA;;AAAA;AAEH,sCAAgB,KAAK,KAArB,mIAA2B;AAAA,wBAAnB,IAAmB;;AACvB,yBAAK,KAAL;AACA,2BAAO,IAAP;AACH;AALE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOH,iBAAK,KAAL,GAAa,EAAb;AACH;;;gCAEM;AACH,gBAAI,MAAM,KAAK,KAAL,GAAW,IAArB;AADG;AAAA;AAAA;;AAAA;AAEH,sCAAe,KAAK,OAApB,mIAA4B;AAAA,wBAApB,GAAoB;;AACxB,2BAAO,IAAI,IAAJ,GAAU,GAAjB;AACH;AAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMH,oBAAQ,GAAR,CAAY,GAAZ;;AAEA,iBAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,CAAnB,EAAsB,GAAtB,EAA0B;AACtB,oBAAG,KAAK,KAAL,CAAW,CAAX,KAAiB,IAApB,EAAyB;AACrB,yBAAK,KAAL,CAAW,CAAX,EAAc,KAAd;AACH;AACJ;AAEJ;;AAED;AACA;;;;gCACO;AACH,gBAAI,KAAJ;AACA,oBAAO,KAAK,KAAZ;AACI,qBAAK,CAAL;AACI,4BAAQ,KAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,OAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,QAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,MAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,QAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,QAAR;AACA;AACJ;;AAnBJ;;AAFG;AAAA;AAAA;;AAAA;AAyBH,sCAAe,KAAK,OAApB,mIAA4B;AAAA,wBAApB,GAAoB;;AACxB,wBAAI,KAAJ,GAAY,KAAZ;AACA,wBAAI,IAAJ;AACH;AA5BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BH,iBAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,CAAnB,EAAsB,GAAtB,EAA0B;AACtB,oBAAG,KAAK,KAAL,CAAW,CAAX,KAAiB,IAApB,EAAyB;AACrB,yBAAK,KAAL,CAAW,CAAX,EAAc,KAAd;AACH;AACJ;AAEJ;;AAED;AACA;;;;6BACK,M,EAAQ,G,EAAI;AACb,gBAAI,KAAJ;AACA,oBAAO,KAAK,KAAZ;AACI,qBAAK,CAAL;AACI,4BAAQ,KAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,OAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,QAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,MAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,QAAR;AACA;AACJ,qBAAK,CAAL;AACI,4BAAQ,QAAR;AACA;AACJ;;AAnBJ;;AAuBA,gBAAI,SAAJ;AACA,gBAAI,IAAJ,CAAS,KAAK,MAAL,CAAY,CAArB,EAAwB,KAAK,MAAL,CAAY,CAApC,EAAuC,KAAK,MAAL,CAAY,KAAnD,EAA0D,KAAK,MAAL,CAAY,MAAtE;AACA,gBAAI,WAAJ,GAAkB,KAAlB;AACA,gBAAI,SAAJ,GAAgB,GAAhB;AACA,gBAAI,MAAJ;;AAEA,iBAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,CAAnB,EAAsB,GAAtB,EAA0B;AACtB,oBAAG,KAAK,KAAL,CAAW,CAAX,KAAiB,IAApB,EAAyB;AACrB,yBAAK,KAAL,CAAW,CAAX,EAAc,IAAd,CAAmB,MAAnB,EAA0B,GAA1B;AACH;AACJ;AAEJ","file":"quadTree-compiled.js","sourcesContent":["/**\n * Created by xaleth on 6/12/2016.\n * implemented based on java code in\n * 'Quick Tip: Use Quadtrees to Detect Likely Collisions in 2D Space'\n *                        by Steven Lambert\n * @ http://gamedevelopment.tutsplus.com/tutorials/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space--gamedev-374\n *\n * transpiled into javascript by Roberto Garza\n */\nconst MAX_OBJECTS = 4;\nconst MAX_LEVELS = 10;\n\nclass QuadTree{\n\n    constructor(lvl, screenBounds){\n        this.level = lvl;         //current depth of quadTree\n        this.objects = [];        //objects within the region/subregion\n        this.nodes = []; //4 child nodes, which are subregions of the parent\n        this.bounds = {           //rectangle that bounds the subregion of screen\n            x:      screenBounds.x,\n            y:      screenBounds.y,\n            width:  screenBounds.width,\n            height: screenBounds.height\n        };\n    }\n\n    split(){\n        let subWidth =  (this.bounds.width  / 2) | 0;\n        let subHeight = (this.bounds.height / 2) | 0;\n\n        let tmpX = this.bounds.x;\n        let tmpY = this.bounds.y;\n\n        this.nodes[0] = new QuadTree(this.level+1, {x:tmpX+subWidth, y:tmpY,           width:subWidth, height:subHeight} )\n        this.nodes[1] = new QuadTree(this.level+1, {x:tmpX,          y:tmpY,           width:subWidth, height:subHeight} )\n        this.nodes[2] = new QuadTree(this.level+1, {x:tmpX,          y:tmpY+subHeight, width:subWidth, height:subHeight} )\n        this.nodes[3] = new QuadTree(this.level+1, {x:tmpX+subWidth, y:tmpY+subHeight, width:subWidth, height:subHeight} )\n    }\n\n\n    //insert the object into the quadtree. if the node\n    //exceeds the capacity, it will split and add all objects to\n    //their corresponding nodes\n    insert(objBounds){\n        if(this.nodes[0] != null){\n            let index = this.getIndex(objBounds);\n\n            if(index != -1){\n                this.nodes[index].insert(objBounds);\n                return;\n            }\n        }\n\n        this.objects.push(objBounds);\n\n        if( this.objects.length > MAX_OBJECTS && this.level < MAX_LEVELS ){\n            if( this.nodes[0] == null ){\n                this.split();\n            }\n\n            let i = 0;\n            while( i < this.objects.length){\n                let obj = this.objects[i];\n                let index = this.getIndex(obj);\n                if(index != -1){\n                    let removedObj = this.objects.splice(this.objects.indexOf(obj),1);\n                    this.nodes[index].insert(removedObj[0]);\n                }else{\n                    i++;\n                }\n            }\n        }\n    }\n\n    //return all objects that could collide with the given object\n    retrieve(objBounds){\n        let index = this.getIndex(objBounds);\n        let returnObjs = this.objects;\n\n        if(this.nodes[0] != null) {\n\n            if (index != -1) {\n                returnObjs = returnObjs.concat(this.nodes[index].retrieve(objBounds));\n            } else {\n                for (let node of this.nodes) {\n                    returnObjs = returnObjs.concat(node.retrieve(objBounds));\n                }\n            }\n\n        }\n\n        return returnObjs;\n\n    }\n\n    getIndex(objBounds){\n        let index = -1;\n        let vertMid = this.bounds.x + (this.bounds.width/2);\n        let horzMid = this.bounds.y + (this.bounds.height/2)\n\n        //Obj fits in top Quadrants\n        let topQuad = (objBounds.y < horzMid && objBounds.y + objBounds.height < horzMid);\n        //Obj fits in bot Quadrants\n        let botQuad = (objBounds.y > horzMid);\n\n\n\n        //Obj fits in left Quadrants\n        if( objBounds.x < vertMid && objBounds.x + objBounds.width < vertMid ){\n            if(topQuad){\n                index = 1;\n            }else if(botQuad){\n                index = 2;\n            }\n        }\n        //Obj fits in right quads\n        else if( objBounds.x > vertMid ){\n            if(topQuad){\n                index = 0;\n            }else if(botQuad){\n                index = 3;\n            }\n        }\n        return index;\n    }\n\n    clear(){\n        this.objects = [];\n        for(let node of this.nodes){\n            node.clear();\n            node = null;\n        }\n\n        this.nodes = [];\n    }\n\n    print(){\n        let str = this.level+\": \";\n        for(let obj of this.objects){\n            str += obj.name+ \" \";\n        }\n\n        console.log(str);\n\n        for(let i = 0; i < 4; i++){\n            if(this.nodes[i] != null){\n                this.nodes[i].print();\n            }\n        }\n\n    }\n\n    //Debugging/Visual function to show which level of the\n    //QuadTree a certain object belongs in\n    paint(){\n        var color;\n        switch(this.level) {\n            case 0:\n                color = \"red\";\n                break;\n            case 1:\n                color = \"green\";\n                break;\n            case 2:\n                color = \"purple\";\n                break;\n            case 3:\n                color = \"blue\";\n                break;\n            case 4:\n                color = \"yellow\";\n                break;\n            case 5:\n                color = \"orange\";\n                break;\n            default:\n\n        }\n\n        for(let obj of this.objects){\n            obj.color = color;\n            obj.draw();\n        }\n\n        for(let i = 0; i < 4; i++){\n            if(this.nodes[i] != null){\n                this.nodes[i].paint();\n            }\n        }\n\n    }\n\n    //Debugging/Visual function to show where the screen bounds are\n    //for each level and it's nodes at each iteration\n    draw(canvas, ctx){\n        var color;\n        switch(this.level) {\n            case 0:\n                color = \"red\";\n                break;\n            case 1:\n                color = \"green\";\n                break;\n            case 2:\n                color = \"purple\";\n                break;\n            case 3:\n                color = \"blue\";\n                break;\n            case 4:\n                color = \"yellow\";\n                break;\n            case 5:\n                color = \"orange\";\n                break;\n            default:\n\n        }\n\n        ctx.beginPath();\n        ctx.rect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = \"4\";\n        ctx.stroke();\n\n        for(let i = 0; i < 4; i++){\n            if(this.nodes[i] != null){\n                this.nodes[i].draw(canvas,ctx);\n            }\n        }\n\n    }\n\n}\n"]}